package cn.jiahua.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, String> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property RealName = new Property(1, String.class, "realName", false, "REAL_NAME");
        public final static Property RoleId = new Property(2, String.class, "roleId", false, "ROLE_ID");
        public final static Property UserNo = new Property(3, String.class, "userNo", false, "USER_NO");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Sex = new Property(5, Boolean.class, "sex", false, "SEX");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USER_NAME");
        public final static Property RoleName = new Property(8, String.class, "roleName", false, "ROLE_NAME");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REAL_NAME\" TEXT," + // 1: realName
                "\"ROLE_ID\" TEXT," + // 2: roleId
                "\"USER_NO\" TEXT," + // 3: userNo
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"SEX\" INTEGER," + // 5: sex
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"USER_NAME\" TEXT," + // 7: userName
                "\"ROLE_NAME\" TEXT);"); // 8: roleName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(2, realName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(3, roleId);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(4, userNo);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        Boolean sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(6, sex ? 1L: 0L);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(9, roleName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(2, realName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(3, roleId);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(4, userNo);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        Boolean sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(6, sex ? 1L: 0L);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(9, roleName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // realName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // roleName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRealName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoleId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoleName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Contact entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
